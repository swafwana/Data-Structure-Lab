#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node
struct Node {
    int data;
    struct Node* next;
};

// Pointer to the top of the stack
struct Node* top = NULL;

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed! Exiting.\n");
        exit(1);
    }
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

// Function to push an element onto the stack
void push(int value) {
    struct Node* newNode = createNode(value);
    newNode->next = top;
    top = newNode;
    printf("Pushed %d onto the stack\n", value);
}

// Function to pop an element from the stack
int pop() {
    if (top == NULL) {
        printf("Stack Underflow\n");
        return -1; // Return a sentinel value to indicate underflow
    }
    int poppedValue = top->data;
    struct Node* temp = top;
    top = top->next;
    free(temp);
    return poppedValue;
}

// Function to display the stack elements
void display() {
    if (top == NULL) {
        printf("Stack is empty\n");
        return;
    }
    struct Node* current = top;
    printf("Stack elements: ");
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

// Menu-driven implementation
int main() {
    int choice, value;

    while (1) {
        printf("\n*** Stack Menu ***\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to push: ");
                scanf("%d", &value);
                push(value);
                break;

            case 2:
                value = pop();
                if (value != -1) {
                    printf("Popped value: %d\n", value);
                }
                break;

            case 3:
                display();
                break;

            case 4:
                printf("Exiting program.\n");
                return 0;

            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}
Searching
#include <stdio.h>
#include <stdlib.h>

// Define the structure of a stack node
struct Node {
    int data;
    struct Node* next;
};

// Global pointer to represent the top of the stack
struct Node* top = NULL;

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

// Push operation
void push(int value) {
    struct Node* newNode = createNode(value);
    newNode->next = top;
    top = newNode;
    printf("Pushed %d onto the stack\n", value);
}

// Search operation
void search(int value) {
    struct Node* current = top; // Start from the top
    int position = 0;          // Position tracker

    // Traverse the stack
    while (current != NULL) {
        position++;
        if (current->data == value) {
            printf("Value %d found at position %d from the top.\n", value, position);
            return;
        }
        current = current->next; // Move to the next node
    }

    // If the value is not found
    printf("Value %d not found in the stack.\n", value);
}

// Display operation (for verification)
void display() {
    struct Node* current = top;
    printf("Stack elements: ");
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

// Main function to demonstrate
int main() {
    push(10);
    push(20);
    push(30);
    display();

    // Search for values
    search(20); // Should find it
    search(40); // Should not find it

    return 0;
}
